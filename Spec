/r/NBA Predictor
model for posts to predict whether it will become a popular on reddit.com/r/nba

Table of Contents
/r/NBA Predictor
Product Spec
a. Overview
b. Data Scraper
c. ML Model
d. Notes from Jason
e. Working Log

3. Product Spec
a. Overview
	Scrapper
		Datasets: Training, Validation, Test 
	Machine Learning Predictor
		Supervised, Categorical Data Classification Algorithm
	Language
		Scraping: Excel (Manual), Python (Automatic)
	Analysis: Pandas
	Machine Learning Algorithm: Python

b. Data Scraper
	Goal: Reddit Posts (# of posts/ data points)
		1000 Total Posts
			80%: Training Set
			20%: Validation Set
			100 posts: Test Set
	How to Get Data
		1. Reddit API: https://stackoverflow.com/questions/14322834/obtaining-reddit-data
		2. Web Scraping: Beautiful Soup vs. Scrapy: https://stackoverflow.com/questions/19687421/difference-between-beautifulsoup-and-scrapy-crawler
	
	Data from submission
	* Refer to sample_reddit_submission 

	How to store Data in a Table
	
	Post Table
	----observed attributes---
	id PRIMARY KEY INTEGER 
	title TEXT
	url	TEXT
	url_domain TEXT
	permalink TEXT
	score INTEGER 
	num_comments INTEGER
	num_duplicates INTEGER
	time_created DATETIME
	author_flair_text TEXT
	author_flair_css_class TEXT
	author TEXT
	gilded INTEGER
	is_self TEXT
	over_18 INTEGER

	----derived_attributes----
	number_of_words:
	players in title:
		need to do one-hot encoding: has_[player]: (0,1)
	title_sentiment: (postiive, negative)
	url_type: (img, tweet, video, self-post, other)
	time_of_post: (before 6am, 6am-12pm, 12pm-6pm, 6pm-12pm)

c. ML Model
	Algorithm
		KNN, Trees, Logistical Regression, Naive-Bayes, SVM
	Features
		Post features
			Title
				Number of words
				Sentiment (Positive or Negative)
				Basketball Players in Title
					First/ Last Name Bi-grams (Lebron James, Chris Paul, Michael Jordan, Jeremy Lin, etc.)
					Last Name (James, Paul, Wade, Lin, George, etc.)
					Popular Nicknames (Lebron, KD, Steph, PG, PG13, AK47, Durantula)
				Teams
					City (Golden State, (Oakland?) Cleveland, New York, Brooklyn, etc.)
					Team Name/ Mascot (Heat, Warriors, Cavaliers, etc.)
					Initials (GSW, OKC, SAS, etc.)
					Team Abbreviations (Cavs, Mavs, etc.)
					Other people (David Stern, Referees, Diamond Leung, etc.) *stretch goal*
			Time of post
			How many likes in first X minutes *stretch goal*
				** Does not work because of karma whoring prevention(link)
			How many comments in first X minutes *stretch goal*
		Poster features *stretch goal*
			Flair of poster
		Content features *stretch goal*
			Source Website (twitter, the ringer, espn, etc.)
			Author (Bill Simmons, Diamond Leung, etc.)
			Type of content (Tweet, Video, Image, Self-Post, Longform, etc.)
			Content Sentiment (Positive, Negative)
	Model Design (TODO)

d. Notes from Jason
---
Vocabulary Terms: "one-hot encoding", "encoded features", "curse of dimensionality"
- Use sklearn gridsearch to compare models
- How to do machine learning
	Step 1: Get Data
	Step 2: Import into pandas
	Step 3: Find predictive/ discriminative features
	Step 4: Get a dataframe of all of those features and shove it into learning model
- Linear models vs. Categorical Models
	- Turn categorical data into linear using one-hot encoding
	i.e: Player name: (Lebron James, Kevin Durant, Chris Paul,...) becomes has_lebron_james: (0,1), has_kevin_durant: (0,1), has_chris_paul(0,1) ....
	- Don't worry about weights because the linear model will just learn small weights for the features if necessary
	- "encoded features"
- How many samples are needed? 
	- Can't say much about that on size of data
	- Depends on the complexity of the model
	- Refer to the topic of "curse of dimensionality"
	- Just get as much quality data as possible


Working Log
---
1. Problem: Too many features
	Solution: Do analysis on scraped results before making final call on ML features. Make a hypothesis on which features on good. Do an experiment to see if those features can segment population votes

2. Problem: How do I get a list of words I want to match for in the title
	a. Basketball Players
		Solution: http://stats.nba.com/players/ (Active, Historic)
	b. Player Nicknames
		Solution: Either hand curate or take from below  https://en.wikipedia.org/wiki/List_of_nicknames_used_in_basketball
	c. Teams
		Solution: Hand curate http://www.nba.com/celtics/history/NBATeamsChronology.html
		https://www.whatifsports.com/nba-l/historical_teams.asp
	d. Team Nicknames
		Solution:
		Hand curated abbreviations [2]
		This includes nicknamesl: https://en.wikipedia.org/wiki/List_of_nicknames_used_in_basketball#Teams
3. How do I do X in python:
	a. show all vars in an array:
		pprint.pprint(vars(array))
	b. convert epoch time into date time
		Step 1: http://www.epochconverter.com/
		Step 2: https://stackoverflow.com/questions/12400256/python-converting-epoch-time-into-the-datetime
		Step 2 (Alternative): pd.to_datetime(df['time_created'],unit='us')


Feature Analysis:
1. Tweet Posts
	- Who posted tweet first
	- Formatting is correct [Author]: Message
2. With Blogs
	- First Person title

 